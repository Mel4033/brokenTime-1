security:
    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        register:
            pattern: ^/api/user/new
            stateless: true
            anonymous: true

        fiction:
            pattern: ^/api/fiction
            stateless: true
            anonymous: true

        api:
            pattern:   ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\AdminAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/profile, roles: ROLE_USER }
        # - { path: ^/api/user, roles: ROLE_ADMIN }
        # - { path: ^/api/user/id, roles: ROLE_USER}


        #? Tout le monde peut faire une demande d'accès à l'API (IS_AUTHENTICATED_ANONYMOUSLY)
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/user/new, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/fiction, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        #? Par contre, seules les personnes authentifié peuvent interagir avec l'API       
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

    # Hiearchisation des rôles
    # role_hierarchy:
        # ROLE_ADMIN:        [ROLE_USER]
        # ROLE_SUPER_ADMIN:  [ROLE_ADMIN]

